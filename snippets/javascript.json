{
	/*
	// Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"Print to console": {
		"prefix": "clog",  // console.log()
		"body": [
			"console.log($0);"
		],
		"description": "Log output to console"
	},
	"Junk print to console": {
		"prefix": "ctl",  // console.log('================='')
		"body": [
			"console.log('=================================');"
		],
		"description": "Log output to console"
	},
	"String print to console": {
		"prefix": "csl",  // console.log('=================== $1 ==============');$0"
		"body": [
			"console.log('=================== $1 ==============');$0"
		],
		"description": "Log output to console"
	},
	"Json stringify": {
		"prefix": "jsify", // "JSON stringify"
		"body": [
			"JSON.stringify($1)"
		],
		"description": "JSON stringify"
	},
	"Log with json stringify": {
		"prefix": "cjs", // "Log output to console"
		"body": [
			"console.log(JSON.stringify($0, null, 2));"
		],
		"description": "Log output to console"
	},
	"For Loop": {
		"prefix": "forloop", // "For Loop"
		"body": [
			"for (var ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
			"\tvar ${3:element} = ${2:array}[${1:index}];",
			"\t$0",
			"}"
		],
		"description": "For Loop"
	},
	"Import Generic": {
		"prefix": "ifrom", // "Import Generic"
		"body": [
			"import { $0 } from '$1';"
		],
		"description": "Import Generic"
	},
	"Import js": {
		"prefix": "ifjs", // "Import Generic"
		"body": [
			"import $2 from '$1';$0"
		],
		"description": "Import js"
	},
	"Export method": {
		"prefix": "emet",
		"body": [
			"export const ${1:method} = function($2) {\n\t$0\n};"
		],
		"description": "Export method"
	},
	"Function": {
		"prefix": "fnc", //"Just a method"
		"body": [
			"${1:method}() {\n\t$2\n}"
		],
		"description": "Just a method"
	},
	"Try and catch": {
		"prefix": "tc", // Try catch block
		"body": [
			"try {",
				"\t${0}",
			   "} catch (${1:err}) {\nconsole.log(${1:err})}",
			   "}"
		]
	},
	"Meteor Method": {
		"prefix": "mmet", // Create a new meteor method
		"body": [
			"export const ${1:methodName} = new ValidatedMethod({",
			"\tname: \"${1:methodName}\",",
			"\tvalidate: new SimpleSchema({",
			"\t\t${2:variableName}: {",
			"\t\t\ttype: ${3:type},",
			"\t\t\toptional: ${4:true}",
			"\t\t}",
			"\t}).validator(),",
			"\trun(options) {",
			"\t\tvar fut = new Future();",
			"\t\tif (!this.userId) {",
			"\t\t\tlogger.error('ERROR: Access denied! Valid user required');",
			"\t\t\tfut.throw(new Meteor.Error(401, 'Access denied!'));",
			"\t\t\treturn;",
			"\t\t}",
			"\t\t$0",
			"\t\tfut.return({})",
			"\t\treturn fut.wait();",
			"\t}",
			"});"
		]
	},
	"Mongo find": {
		"prefix": "mofi", // Mongo .find
		"body": [
			"let ${4:results} = ${1:Circles}.find({",
				"\t${2:key}:${3:value}",
			"});" 
		]
	},
	"Mongo Update": {
		"prefix": "moup", // Mongo .update
		"body": [
			"${1:Circles}.update({",
				"\t${2:key}:${3:value}",
			"}, {",
			"\t$0",	
			"});" 
		]
	},
	"Null check": {
		"prefix": "ifnull",
		"body": [
			"if (${1:variable}) {",
			"\t$2",
			"}"
		]
	},
	"array size check": {
		"prefix": "ifarray",
		"body": [
			"if (${1:variable} && ${1:variable}.length > 0) {",
			"\t$2",
			"}"
		]
	},
	"express method": {
		"prefix": "exp",
		"body": [
			"async function $1(req, res) {",
			"$2",
			"\tres.json($0)",
			"}"
		]
	}
}
